public class Solution {
    public int nthSuperUglyNumber(int n, int[] primes) {
        if (n == 1) return 1;

        PriorityQueue<int[]> queue = new PriorityQueue<>((a,b) -> {
            return a[0] - b[0];
        });

        for (int i = 0; i < primes.length; i++) {
            queue.add(new int[]{primes[i], primes[i], 0});
        }

        int[] m = new int[n];
        m[0] = 1;
        for (int i = 1; i < n; i++) {
            int[] curr = queue.peek();
            m[i] = curr;
            while (queue.peek()[0] == curr[0]) {
                int[] b = queue.remove();
                queue.add(new int[]{m[b[2]+1]*b[1], b[1], b[2]+1})
            }
        }

        return m[n-1];
    }
}

// or just go straight

index = new int[primes.length];
ugly = new int[n];
ugly[0] = 1;
for (int i = 1; i < n; i++) {
    int min = Integer.MAX_VALUE;
    for (int j = 0; j < primes.length; j++) {
        min = Math.min(min, primes[j]*ugly[index[j]]);
    }

    ugly[i] = min;

    for (int j = 0; j < primes.length; j++) {
        if (min == primes[j]*ugly[index[j]]) index[j]++;
    }
}